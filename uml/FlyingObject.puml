@startuml
'https://plantuml.com/class-diagram

interface clear{
    clear():int
}

abstract class AbstractFlyingObject{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject abstractFlyingObject):boolean
    + getLocationX():int
    + getLocationY():int
    + setLocation(double locationX, double locationY):void
    + getSpeedX():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    + clear():int
}

clear <|.. AbstractFlyingObject

abstract AbstractAircraft{
    # maxHp:int
    # hp:int
    # shootNum:int
    # power:int
    # direction:int
    # score:int

    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + getHp():int
    + getShootNum():int
    + getPower():int
    + getDirection():int
    + getScore():int
    + setShootNum(int shootNum):void
    + setHp(int hp):void
    + {abstract} shoot():List<BaseBullet>
    + clear():int
}

abstract class BaseBullet{
    - power:int

    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
    + getPower():int
}

abstract class AbstractProp{
    - {static} genBloodRate:double
    - {static} genBombRate:double
    - {static} genBulletRate:double

    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} effect():int
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- AbstractProp
AbstractFlyingObject <|-- BaseBullet

class BossEnemy{
    - {static} bossEnemy:BossEnemy
    - thread:MusicThread
    - shootContext:ShootContext
    - {static} growTime:int

    - BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int power)
    + {static} getInstance(boolean ifGrow):BossEnemy
    + {static} isNull:boolean
    + vanish():void
    + shoot():List<BaseBullet>
    + createProp():AbstractProp
}

class EliteEnemy{
    - shootContext:ShootContext
    - dropRate:double

    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int power)
    + forward():void
    + createProp():AbstractProp
    + shoot():List<BaseBullet>
    + getDropRate():double
}

class HeroAircraft{
    - {static} heroAircraft:HeroAircraft
    - {static} shootContext:ShootContext

    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance:HeroAircraft
    + setStrategy(ShootStrategy shootStrategy):void
    + forward():void
    + shoot():List<BaseBullet>
}

class MobEnemy{
    - ShootContext shootContext;

    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- BossEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy

class HeroBullet{
    + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class EnemyBullet{
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

class PropBlood{
    - recoverNum:int

    + PropBlood(int locationX, int locationY, int speedX, int speedY)
    + effect():int
}

class PropBomb{
    - flyObjects:List<AbstractFlyingObject>

    + PropBomb(int locationX, int locationY, int speedX, int speedY)
    + effect():int
    + addFlyingObject(AbstractFlyingObject abstractFlyingObject):void
    + deleteFlyingObject(AbstractFlyingObject abstractFlyingObject):void
    + notifyAll():int
}

class PropBullet{
    - {static} TIMER:Timer

    + PropBullet(int locationX, int locationY, int speedX, int speedY)
    + effect():int
}

AbstractProp <|-- PropBlood
AbstractProp <|-- PropBomb
AbstractProp <|-- PropBullet

@enduml